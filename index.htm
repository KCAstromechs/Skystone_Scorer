<html>

<link href="https://fonts.googleapis.com/css?family=Rubik" rel="stylesheet">

<style>
    /*
	Copyright (c) 2019 Steve Penrod and the KC Astromechs #3409

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
*/

    body {
        overflow: auto;
        font-family: sans-serif;
        font-size: 100%;    /* Fallback in case vw/vh isn't supported */
    }

    #logo {
        position: fixed;
        left: 50%;
        top: 50vh;
        width: 25%;
        margin-left: calc(25% / -2);
        opacity:0.05;
        z-index: 0;
    }

    #red_score {
        color: #FF1111;
        font-size: 5vh;
        font-family: Rubik;
        font-weight: 800;
        text-shadow: 0.2vmax 0.2vmax 0.2vmax rgba(150, 150, 150, 0.5);
    }

    #blue_score {
        color: blue;
        font-size: 5vh;
        font-family: Rubik;
        font-weight: 800;
        text-shadow: 0.2vmax 0.2vmax 0.2vmax rgba(150, 150, 150, 0.5);
    }

    h1 {
        width: 100%;
        font-size: 5vh;
        text-align: center;
        margin-bottom: 0;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #000;
    }

    .skystone_color {
        color: #105369;
    }

    .skystone_color_shadowed {
        color: #105369;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #A1C3D0;
    }

    #countdown {
        font-family: monospace;
        font-size: 4.5vh;
        color: #105369;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #A1C3D0;
        display: none;
    }
    #linebreaker {
        display: inline-block;
    }
    #countdown_label {
        font-size: 2.5vh;
        padding-left: 1vw;
        color: #105369;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #A1C3D0;
    }

    .skystone_color_shadowed {
        color: #105369;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #A1C3D0;
    }

    #red_parking_auto_1 {
        position: absolute;
        right: 15vmax;
        top: -2vmax;
    }
    #red_parking_auto_2 {
        position: absolute;
        right: 5vmax;
        top: 0vmax;
    }
    #blue_parking_auto_1 {
        position: absolute;
        left: 15vmax;
        top: -2vmax;
    }
    #blue_parking_auto_2 {
        position: absolute;
        left: 5vmax;
        top: 0vmax;
    }

    #message {
        position: relative;
        top: -1vmin;
        font-size: 3vmax;
        width: 50vw;
        color: gray;
        text-shadow: 0.2vmin 0.2vmin 0.4vmin #A1C3D0;
        word-wrap: unset;
        white-space: nowrap;
        overflow: visible;
        text-align: center;
        display: inline-block;
    }

    h2 {
        font-size: 3vh;
        margin: 0.5vh;
    }

    .moveleft.ToMove {
        height: 3vh;
        width: 5vw;
        background-image: url(MoveLeft-faint.png);
        background-size: 100% 100%;
    }

    .moveleft.Moved {
        height: 3vh;
        width: 5vw;
        background-image: url(MoveLeft.png);
        background-size: 100% 100%;
    }

    .moveright.ToMove {
        height: 3vh;
        width: 5vw;
        background-image: url(MoveRight-faint.png);
        background-size: 100% 100%;
    }

    .moveright.Moved {
        height: 3vh;
        width: 5vw;
        background-image: url(MoveRight.png);
        background-size: 100% 100%;
    }

    #credits {
        width: 100%;
        text-align: center;
        padding-top: 2vh;
        font-size: 1.5vh;
    }

    #auto,
    #teleop {
        font-size: 3vh;
        background-color: #4CAF50;
        border: none;
        color: white;
        padding: 1vh 2vw;
        text-decoration: none;
        display: inline-block;
    }

    #buttonRefresh,
    #buttonPP {
        background-color: #eee;
        border-radius: 3vmax;
        border-width: 0;
    }

    #buttonRefresh:focus,
    #buttonPP:focus {
        border: none;
        outline: none;
    }

    #iconRefresh,
    #iconPP {
        padding: 0;
        margin: 0;
        height: 5vh;
    }

    .blue {
        border-color: blue;
    }

    .red {
        border-color: darkred;
    }

    .skybridge {
        width: 25vmax;
        height: 1vh;
        margin-top: -1vh;
        position: absolute;
        border-top: 0vh solid;
        border-bottom: 0vh solid;
    }

    /***************** Glow effect for Skybridges *****************/

    .blue_glow {
        background: #1111FF;
        -webkit-animation: neon_blue 1.5s ease-in-out infinite alternate;
        -moz-animation: neon_blue 1.5s ease-in-out infinite alternate;
        animation: neon_blue 1.5s ease-in-out infinite alternate;
    }

    @-webkit-keyframes neon_blue {
        from {
            box-shadow: 0 0 5px #00F, 0 0 10px #CCF, 0 0 15px #CCF;
        }

        to {
            box-shadow: 0 0 2px #00F, 0 0 5px #CCF, 0 0 8px #CCF, 0 0 10px #3311FF, 0 0 17px #3311FF, 0 0 20px #3311FF, 0 0 50px #3311FF;
        }
    }

    @-moz-keyframes neon_blue {
        from {
            box-shadow: 0 0 5px #00F, 0 0 10px #CCF, 0 0 15px #CCF;
        }

        to {
            box-shadow: 0 0 2px #00F, 0 0 5px #CCF, 0 0 8px #CCF, 0 0 10px #3311FF, 0 0 17px #3311FF, 0 0 20px #3311FF, 0 0 50px #3311FF;
        }
    }

    @keyframes neon_blue {
        from {
            box-shadow: 0 0 5px #00F, 0 0 10px #CCF, 0 0 15px #CCF;
        }

        to {
            box-shadow: 0 0 2px #00F, 0 0 5px #CCF, 0 0 8px #CCF, 0 0 10px #3311FF, 0 0 17px #3311FF, 0 0 20px #3311FF, 0 0 50px #3311FF;
        }
    }

    .red_glow {
        background: #FF1111;
        /* Create glow effect */
        -webkit-animation: neon_red 1.5s ease-in-out infinite alternate;
        -moz-animation: neon_red 1.5s ease-in-out infinite alternate;
        animation: neon_red 1.5s ease-in-out infinite alternate;
    }

    @-webkit-keyframes neon_red {
        from {
            box-shadow: 0 0 5px #f00, 0 0 10px #fcc, 0 0 15px #fcc;
        }

        to {
            box-shadow: 0 0 2px #f00, 0 0 5px #fcc, 0 0 8px #fcc, 0 0 10px #FF1177, 0 0 17px #FF1177, 0 0 20px #FF1177, 0 0 50px #FF1177;
        }
    }

    @-moz-keyframes neon_red {
        from {
            box-shadow: 0 0 5px #f00, 0 0 10px #fcc, 0 0 15px #fcc;
        }

        to {
            box-shadow: 0 0 2px #f00, 0 0 5px #fcc, 0 0 8px #fcc, 0 0 10px #FF1177, 0 0 17px #FF1177, 0 0 20px #FF1177, 0 0 50px #FF1177;
        }
    }

    @keyframes neon_red {
        from {
            box-shadow: 0 0 5px #f00, 0 0 10px #fcc, 0 0 15px #fcc;
        }

        to {
            box-shadow: 0 0 2px #f00, 0 0 5px #fcc, 0 0 8px #fcc, 0 0 10px #FF1177, 0 0 17px #FF1177, 0 0 20px #FF1177, 0 0 50px #FF1177;
        }
    }

    /****************** Stone tables *****************/

    table {
        /* Disable text selection, preventing numbers from highlighting when double-clicked */
        -webkit-touch-callout: none;    /* iOS Safari */
        -webkit-user-select: none;      /* Chrome/Safari/Opera */
        -khtml-user-select: none;       /* Konqueror */
        -moz-user-select: none;         /* Firefox */
        -ms-user-select: none;          /* Internet Explorer/Edge */
        user-select: none;              /* Non-prefixed version, currently supported by any browser but before IE9 */
    }

    .stone_counters {
        width: 7.5vw;
        background-color: #AAA;
        margin-top: 2vh;
        margin-bottom: 1vh;
        display: inline-block;
    }

    .stone_counters td {
        height: 3vh;
        width: 50%;
    }

    .stone_counters table {
        table-layout: fixed;
        width: 100%;
    }

    .counter {
        font-size: 2.5vmax;
        font-family: Rubik;
        font-weight: 800;
        text-shadow: 0.2vmax 0.2vmax 1vmax rgba(0, 0, 0, 0.8);
        color: #cc0;
    }

    .penalty {
        color: #f00;
    }

    .foundation_container {
        display: -webkit-box;
        display: -moz-box;
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-flex-flow: row wrap;
        justify-content: space-evenly;
    }

    .foundation {
        display: inline-block;      /* stops tables from hard wrapping */
        position: relative;
        width: 15vmax;
        border: 0.1vw solid;
        padding: 0;
        border-spacing: 0;
        border-collapse: collapse;
        z-index: 99;
        vertical-align: middle;
        margin: auto;
        margin-bottom: 20px;
    }

    .foundation td {
        font-size: 2vmax;
        height: 3.5vmax;
        width: 5.5vmax;
        border: 0.1vw solid black;
        text-align: justify;
        text-align-last: justify;
        padding: 0 1vmax;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover;
    }

    .foundation td.filled {
        background-image: url(Stone.png);
        color: #000;
    }

    .foundation td.capped1 {
        border-left-width: 5px;
    }

    .foundation td.capped2 {
        border-right-width: 5px;
    }

    .foundation.blue td.empty {
        background-image: url(BlueFoundation.png);
    }

    .foundation.red td.empty {
        background-image: url(RedFoundation.png);
    }

    .cap {
        position: relative;
        top: -1vh;
        width: 5vmax;
        height: 5vmax;
        border: 0;
        background-image: url(cap.png);
        background-size: 100% 100%;
    }

    .cap_holder {
        width: 5vmax;
        height: 5vmax;
    }

    #remove_btn {
        width: 4.5vmax;
    }

    /**************** Parking indicators ****************/

    .parking {
        width: 4vmax;
        height: 4vmax;
        border: 0.1vw solid;
        border-color: black;
    }

    #blue_parking_end_1 {
        position: absolute;
        top: -13vmax;
        left: 5.5vmax;
    }

    #blue_parking_end_2 {
        position: absolute;
        top: -8vmax;
        left: 0.5vmax;
    }

    #red_parking_end_1 {
        position: absolute;
        top: -13vmax;
        right: 6vmax;
    }

    #red_parking_end_2 {
        position: absolute;
        top: -8vmax;
        right: 1vmax;
    }

    .parked {
        background-image: url(Parked.png);
        background-size: 100% 100%;
    }

    .topark {
        background-image: url(ToPark.png);
        background-size: 100% 100%;
    }

    /**************** Misc ****************/

    .circleIcon {
        border: 0px;
        height: 7vh;
    }

    .corner_img {
        width: 15w;
        height: 15vmax;
        position: relative;
    }

    /**************** Tweaks for vertical orientation ****************/

    @media (max-aspect-ratio: 3/2) {
        .foundation {
            /* xxtransform: rotate(90deg); */
            width: calc(15vmax * 1.25);    /* 15vmax in other orientation */
        }
        .foundation td {
            height: calc(3.5vmax * 1.25);
            width: calc(7.5vmax * 1.25 - 1vmax);
            font-size: calc(2vmax * 1.25);
        }

        .stone_counters {
            width: 30vw;
            display: inline-table;
        }
        .stone_counters td {
            padding: 0.5vw;
            font-size: 4.5vh;
        }


        #logo {
            left: 15%;
            top: 75vh;
        }

        #message {
            height: 7vh;
            padding: 1vh;
        }

        #linebreaker {
            display: block;
        }
    }
</style>

<script>
    var ACTIVE_COLOR = "#4CAF50";
    var INACTIVE_COLOR = "#aaa";
    var isAuto = true;
    var editing = true; // "Editing" is for when you aren't timing a match
    var removing = false; // for when picking up stones or caps
    var bouncer = null;
    var prevent_bounceTime = Date.now();
    var auto_score_sep = " ";

    function elByID(id) {
        return document.getElementById(id);
    }

    function reset_park(id) {
        var el = elByID(id);

        el.classList.add("ToPark");
        el.classList.remove("Parked");
    }

    function reset_move(id) {
        var el = elByID(id);

        el.classList.add("ToMove");
        el.classList.remove("Moved");
    }

    function onAutoParkClick(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (prevent_bounce("park"))
            return;

        if (!isAuto && !editing) {
            flashMessage("Only during Auto");
            return;
        }

        var el = ev.target;
        el.classList.toggle("ToPark");
        el.classList.toggle("Parked");
        calcScore();
    }

    function onEndParkClick(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (prevent_bounce("park"))
            return;

        var el = ev.target;
        el.classList.toggle("ToPark");
        el.classList.toggle("Parked");
        calcScore();
    }

    function flashMessage(msg, replaceWith) {
        showMessage(msg);
        setTimeout(function () {
            showMessage(replaceWith);
        }, 1000);
    }

    function showMessage(msg) {
        if (!msg || msg == "")
            msg = "&nbsp;"

        elByID("message").innerHTML = msg;
    }

    function onRemove(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen
        if (prevent_bounce("remove"))
            return;

        removing = !removing;

        if (removing) {
            showMessage("Tap the stone or cap to remove");
            ev.target.style.borderRadius = "3vw";
            ev.target.style.boxShadow = "0vw 0vw 3vw #0F0";
        } else {
            endRemove();
            flashMessage("Removal canceled");
        }
    }

    function endRemove(ev) {
        // Update visualization
        elByID("remove_btn").style.boxShadow = "";
        showMessage("");
        removing = false;
    }

    var cap = null;

    function onCapClick(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen
        if (prevent_bounce("capping"))
            return;

        if (removing) {
            cap = ev.target;

            // Return cap
            cap.style.position = null;
            cap.style.top = null;
            cap.style.left = null;

            // Uncapping a previously capped tower
            if (cap.tower.classList.contains("capped2"))
                cap.tower.classList.remove("capped2");
            else if (cap.tower.classList.contains("capped1"))
                cap.tower.classList.remove("capped1");
            cap.style.width = null;
            cap.style.height = null;
            cap.tower = null;
            cap = null;


            endRemove();
            calcScore();
            return;
        }

        if (cap) {
            flashMessage("Cap cancelled");
            cap = null;
        } else {
            showMessage("Tap the tower to cap");
            cap = ev.target;
        }
    }

    function findAncestor(el, selector, stopSelector) {
        if (!el)
            return null;
        if (el.matches(selector))
            return el;
        if (stopSelector && el.matches(stopSelector))
            return null;
        return findAncestor(el.parentElement, selector);
    }

    function prevent_bounce(name) {
        var now = Date.now();

        if (name == bouncer && prevent_bounceTime && now - prevent_bounceTime < 250)
            return true; // can't click faster than once every 250ms

        bouncer = name;
        prevent_bounceTime = now;
        return false;
    }

    function onSkyStoneClick(event) {
        var el = event.target;
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (prevent_bounce("skyStone"))
            return;

        if (!removing && !isAuto) {
            flashMessage("Only possible during Auto");
            return;
        }

        var elTable = findAncestor(el, "table");
        if (removing) {
            elTable.rows[1].cells[0].innerHTML = Math.max(0, Number(elTable.rows[1].cells[0].innerHTML) - 1);
            endRemove();
        } else {
            elTable.rows[1].cells[0].innerHTML = (Number(elTable.rows[1].cells[0].innerHTML) + 1) % 3;
        }
        calcScore();
    }

    function onStoneClick(event, el, decrementing) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (prevent_bounce("stone"))
            return;

        var elTable = null;
        var delta = 1;
        if (decrementing) {
            elTable = elByID(decrementing);
            delta = -1;
        } else {
            elTable = findAncestor(el, "table");
            if (removing) {
                delta = -1;
                endRemove();
            }
        }

        if (isAuto)
            elTable.rows[1].cells[0].innerHTML = "+" + (Math.max(0, Number(elTable.rows[1].cells[0].innerHTML) + delta)  % 7);
        else
            elTable.rows[1].cells[1].innerHTML = Math.max(0, Number(elTable.rows[1].cells[1].innerHTML) + delta);
        calcScore();
    }

    function onFoundationClick(event) {
        var cell = event.target;
        var elTable = findAncestor(cell, "table");
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (prevent_bounce("Foundation"))
            return;

        r = cell.parentElement.rowIndex;
        c = cell.cellIndex;

        var cur = "" + elTable.rows[r].cells[c].innerHTML;
        var cAuto = 0;
        var cTeleop = 0;

        if (cap) {
            if ((elTable.classList.contains("red") && cap.classList.contains("blue")) ||
                (elTable.classList.contains("blue") && cap.classList.contains("red")) )
            {
                flashMessage("Cap is for other aliance.", "Tap the tower to cap");
                return;
            }


            showMessage("");

            if (cap.tower) {
                // Uncapping a previously capped tower
                cap.tower.classList.remove(cap.cellPos);
                cap.cellPos = null;
            }
            cap.tower = cell;


            var xOfs = 0;
            if (cell.classList.contains("capped1")) {
                cap.cellPos = "capped2";
                xOfs = cell.clientWidth / 2;
            } else
                cap.cellPos = "capped1";
            cell.classList.add(cap.cellPos);


            cap.style.position = "absolute";
            cap.style.top = window.scrollY + cell.getBoundingClientRect().top;
            cap.style.left = window.scrollX + cell.getBoundingClientRect().left + xOfs;
            cap.style.zIndex = 99;

            cap.style.width = cell.getBoundingClientRect().height;
            cap.style.height = cell.getBoundingClientRect().height;
            cap = null;
            calcScore();
            return;
        }

        if (cur.includes('+')) {
            var asplit = cur.replace("+", "").split(auto_score_sep);
            cAuto = Number(asplit[0]);
            cTeleop = Number(asplit[1]);
        } else
            cTeleop = Number(cur);
        if (isNaN(cTeleop))
            cTeleop = 0;
        if (isNaN(cAuto))
            cAuto = 0;

        var delta = 1;
        if (removing) {
            delta = -1;
            endRemove();
        }

        if (isAuto)
            cAuto = Math.max(0, cAuto + delta);
        else
            cTeleop = Math.max(0, cTeleop + delta);

        if (cAuto)
            v = "+" + cAuto + auto_score_sep + cTeleop;
        else if (cTeleop)
            v = cTeleop;
        else
            v = "&nbsp;"
        elTable.rows[r].cells[c].innerHTML = v;

        if (cTeleop + cAuto > 0) {
            cell.classList.remove("empty");
            cell.classList.add("filled");
        } else {
            cell.classList.add("empty");
            cell.classList.remove("filled");
        }

        calcScore();
    }

    function onPlatformIn(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        if (!isAuto && !editing) {
            flashMessage("Only during Auto")
            return;
        }

        var el = ev.target;
        el.classList.toggle("ToMove");
        el.classList.toggle("Moved");
        calcScore();
    }

    function onPlatformOut(ev) {
        event.preventDefault(); // prevents duplicate onclick if touchscreen

        var el = ev.target;
        el.classList.toggle("ToMove");
        el.classList.toggle("Moved");
        calcScore();
    }

    function reset() {
        elByID("blue_skystone_count").rows[1].cells[0].innerHTML = 0;
        elByID("red_skystone_count").rows[1].cells[0].innerHTML = 0;
        elByID("red_stone_count").rows[1].cells[0].innerHTML = "+0";
        elByID("red_stone_count").rows[1].cells[1].innerHTML = 0;
        elByID("blue_stone_count").rows[1].cells[0].innerHTML = "+0";
        elByID("blue_stone_count").rows[1].cells[1].innerHTML = 0;

        elByID("red_return_count").rows[1].cells[0].innerHTML = "+0";
        elByID("red_return_count").rows[1].cells[1].innerHTML = 0;
        elByID("blue_return_count").rows[1].cells[0].innerHTML = "+0";
        elByID("blue_return_count").rows[1].cells[1].innerHTML = 0;

        var redFoundation = elByID("red_foundation");
        var blueFoundation = elByID("blue_foundation");
        for (var c = 0; c < 2; c++)
            for (var r = 0; r < 8; r++) {
                redFoundation.rows[r].cells[c].innerHTML = "&nbsp;";
                redFoundation.rows[r].cells[c].className = "empty";

                blueFoundation.rows[r].cells[c].innerHTML = "&nbsp;";
                blueFoundation.rows[r].cells[c].className = "empty";
            }

        reset_park("red_parking_auto_1");
        reset_park("red_parking_auto_2");
        reset_park("blue_parking_auto_1");
        reset_park("blue_parking_auto_2");
        reset_park("blue_parking_end_1");
        reset_park("blue_parking_end_2");
        reset_park("red_parking_end_1");
        reset_park("red_parking_end_2");

        reset_move("blue_platform_in");
        reset_move("blue_platform_out");
        reset_move("red_platform_in");
        reset_move("red_platform_out");
    }

    function hookup_Click(el, listener) {
        el.addEventListener('touchstart', function (e) {
            listener(e, e.target)
        });
        el.addEventListener('click', function (e) {
            listener(e, e.target)
        });
    }

    function init() {
        var redFoundation = elByID("red_foundation");
        var blueFoundation = elByID("blue_foundation");
        for (var c = 0; c < 2; c++)
            for (var r = 0; r < 8; r++) {
                hookup_Click(redFoundation.rows[r].cells[c], onFoundationClick);
                hookup_Click(blueFoundation.rows[r].cells[c], onFoundationClick);
            }
        elByID("blue_foundation").addEventListener('touchstart', preventZoom);
        elByID("red_foundation").addEventListener('touchstart', preventZoom);

        hookup_Click(elByID("blue_parking_auto_1"), onAutoParkClick);
        hookup_Click(elByID("blue_parking_auto_2"), onAutoParkClick);
        hookup_Click(elByID("red_parking_auto_1"), onAutoParkClick);
        hookup_Click(elByID("red_parking_auto_2"), onAutoParkClick);

        hookup_Click(elByID("blue_cap_1"), onCapClick);
        hookup_Click(elByID("blue_cap_2"), onCapClick);
        hookup_Click(elByID("red_cap_1"), onCapClick);
        hookup_Click(elByID("red_cap_2"), onCapClick);

        hookup_Click(elByID("remove_btn"), onRemove);

        hookup_Click(elByID("red_skystone_count"), onSkyStoneClick);
        hookup_Click(elByID("blue_skystone_count"), onSkyStoneClick);
        hookup_Click(elByID("blue_stone_count"), onStoneClick);
        hookup_Click(elByID("red_stone_count"), onStoneClick);

        hookup_Click(elByID("blue_return_count"), onStoneClick);
        hookup_Click(elByID("red_return_count"), onStoneClick);

        hookup_Click(elByID("blue_platform_in"), onPlatformIn);
        hookup_Click(elByID("red_platform_in"), onPlatformIn);
        hookup_Click(elByID("blue_platform_out"), onPlatformOut);
        hookup_Click(elByID("red_platform_out"), onPlatformOut);

        hookup_Click(elByID("blue_parking_end_1"), onEndParkClick);
        hookup_Click(elByID("blue_parking_end_2"), onEndParkClick);
        hookup_Click(elByID("red_parking_end_1"), onEndParkClick);
        hookup_Click(elByID("red_parking_end_2"), onEndParkClick);

        reset();
        elByID("auto").style.backgroundColor = ACTIVE_COLOR;
        elByID("teleop").style.backgroundColor = INACTIVE_COLOR

        calcScore();
    }

    function preventZoom(e) {
        var t2 = e.timeStamp;
        var t1 = e.currentTarget.dataset.lastTouch || t2;
        var dt = t2 - t1;
        var fingers = e.touches.length;
        e.currentTarget.dataset.lastTouch = t2;

        if (!dt || dt > 500 || fingers > 1) return; // not double-tap

        e.preventDefault();
        e.target.click();
    }

    function onTeleOp() {
        isAuto = false;

        elByID("auto").style.backgroundColor = INACTIVE_COLOR;
        elByID("teleop").style.backgroundColor = ACTIVE_COLOR;
    }

    function onEndGame() {
        elByID("blue_platform_out").style.visibility = "visible";
        elByID("blue_parking_end_1").style.visibility = "visible";
        elByID("blue_parking_end_2").style.visibility = "visible";
        elByID("red_platform_out").style.visibility = "visible";
        elByID("red_parking_end_1").style.visibility = "visible";
        elByID("red_parking_end_2").style.visibility = "visible";
        elByID("blue_cap_1").style.visibility = "visible";
        elByID("blue_cap_2").style.visibility = "visible";
        elByID("red_cap_1").style.visibility = "visible";
        elByID("red_cap_2").style.visibility = "visible";
    }

    function onAuto() {
        isAuto = true;

        elByID("auto").style.backgroundColor = ACTIVE_COLOR;
        elByID("teleop").style.backgroundColor = INACTIVE_COLOR
    }

    function calcScore() {
        var red = 0;
        var blue = 0;

        //////////////////////////////////////////////////////////////////////
        // Score Autonomous
        blue += elByID("blue_platform_in").classList.contains("Moved") ? 10 : 0;
        red += elByID("red_platform_in").classList.contains("Moved") ? 10 : 0;

        red += 10 * Number(elByID("red_skystone_count").rows[1].cells[0].innerHTML);
        red += 2 * Number(elByID("red_stone_count").rows[1].cells[0].innerHTML);

        blue += 10 * Number(elByID("blue_skystone_count").rows[1].cells[0].innerHTML);
        blue += 2 * Number(elByID("blue_stone_count").rows[1].cells[0].innerHTML);

        blue += elByID("blue_parking_auto_1").classList.contains("Parked") ? 5 : 0;
        blue += elByID("blue_parking_auto_2").classList.contains("Parked") ? 5 : 0;
        red += elByID("red_parking_auto_1").classList.contains("Parked") ? 5 : 0;
        red += elByID("red_parking_auto_2").classList.contains("Parked") ? 5 : 0;

        // Score teleop
        red += 1 * Number(elByID("red_stone_count").rows[1].cells[1].innerHTML);
        blue += 1 * Number(elByID("blue_stone_count").rows[1].cells[1].innerHTML);

        // Score Endgame
        blue += elByID("blue_platform_out").classList.contains("Moved") ? 15 : 0;
        red += elByID("red_platform_out").classList.contains("Moved") ? 15 : 0;

        blue += elByID("blue_parking_end_1").classList.contains("Parked") ? 5 : 0;
        blue += elByID("blue_parking_end_2").classList.contains("Parked") ? 5 : 0;
        red += elByID("red_parking_end_1").classList.contains("Parked") ? 5 : 0;
        red += elByID("red_parking_end_2").classList.contains("Parked") ? 5 : 0;


        var redFoundation = elByID("red_foundation");
        var cTallest = 0;
        for (var c = 0; c < 2; c++)
            for (var r = 0; r < 8; r++) {
                var cell = redFoundation.rows[r].cells[c];
                var cur = "" + cell.innerHTML;
                var cAuto = 0;
                var cTeleop = 0;

                if (cur.includes('+')) {
                    var asplit = cur.replace("+", "").split(auto_score_sep);
                    cAuto = Number(asplit[0]);
                    cTeleop = Number(asplit[1]);
                } else
                    cTeleop = Number(cur);
                if (isNaN(cTeleop))
                    cTeleop = 0;
                if (isNaN(cAuto))
                    cAuto = 0;

                red += 4 * cAuto;
                red += 1 * cTeleop;

                if (cAuto + cTeleop > cTallest)
                    cTallest = cAuto + cTeleop;

                if (cell.classList.contains("capped1")) {
                    // Calc the cap score
                    red += 5 + cAuto + cTeleop;
                }
                if (cell.classList.contains("capped2")) {
                    // Calc the cap score
                    red += 5 + cAuto + cTeleop;
                }
            }
        red += 2 * cTallest;

        var blueFoundation = elByID("blue_foundation");
        cTallest = 0;
        for (var c = 0; c < 2; c++)
            for (var r = 0; r < 8; r++) {
                var cell = blueFoundation.rows[r].cells[c];
                var cur = "" + cell.innerHTML;
                var cAuto = 0;
                var cTeleop = 0;

                if (cur.includes('+')) {
                    var asplit = cur.replace("+", "").split(auto_score_sep);
                    cAuto = Number(asplit[0]);
                    cTeleop = Number(asplit[1]);
                } else
                    cTeleop = Number(cur);
                if (isNaN(cTeleop))
                    cTeleop = 0;
                if (isNaN(cAuto))
                    cAuto = 0;

                blue += 4 * cAuto;
                blue += 1 * cTeleop;

                if (cAuto + cTeleop > cTallest)
                    cTallest = cAuto + cTeleop;

                if (cell.classList.contains("capped1")) {
                    // Calc the cap score
                    blue += 5 + cAuto + cTeleop;
                }
                if (cell.classList.contains("capped2")) {
                    // Calc the cap score
                    blue += 5 + cAuto + cTeleop;
                }
            }
        blue += 2 * cTallest;

        // Deal with penalties
        blue -= 10 * Number(elByID("blue_return_count").rows[1].cells[0].innerHTML);
        blue -= 2 * Number(elByID("blue_return_count").rows[1].cells[1].innerHTML);
        red -= 10 * Number(elByID("red_return_count").rows[1].cells[0].innerHTML);
        red -= 2 * Number(elByID("red_return_count").rows[1].cells[1].innerHTML);

        elByID("blue_score").innerHTML = blue;
        elByID("red_score").innerHTML = red;
    }


    var timer = null;
    var phase = 0; // 0 = not started, 5 = finished
    // 1 = prematch, 2 = auto (0:30), 3 = between (0:05), 4 = teleop (1:30), 5 = endgame (0:30)
    // negative when paused
    var timeStart = 0;

    function onPlayPause() {
        var btn = elByID("iconPP");

        if (btn.src.indexOf("play") > -1) {
            // Playing...
            onAuto();

            btn.src = "pause_circle_outline.svg";
            showMessage("");

            if (phase == 0) {
                PlaySound("StartMatch", startMatch);

                // Very first time, hide elements that you can't use in Auto
                elByID("blue_platform_out").style.visibility = "hidden";
                elByID("blue_parking_end_1").style.visibility = "hidden";
                elByID("blue_parking_end_2").style.visibility = "hidden";
                elByID("red_platform_out").style.visibility = "hidden";
                elByID("red_parking_end_1").style.visibility = "hidden";
                elByID("red_parking_end_2").style.visibility = "hidden";

                elByID("blue_cap_1").style.visibility = "hidden";
                elByID("blue_cap_2").style.visibility = "hidden";
                elByID("red_cap_1").style.visibility = "hidden";
                elByID("red_cap_2").style.visibility = "hidden";

                elByID("auto").style.display = "none";
                elByID("teleop").style.display = "none";
                elByID("countdown").style.display = "inline-block";
                elByID("countdown").innerHTML = "0:30";
            } else {
                // Unpausing
                phase = -phase;
                timeStart = new Date().getTime() - timeStart;
                if (timer)
                    clearInterval(timer);
                timer = setInterval(onClockUpdate, 50);
            }
        } else {
            // Pausing...
            btn.src = "play_circle_outline.svg";
            phase = -phase;
            timeStart = new Date().getTime() - timeStart;
            showMessage("Paused");
        }
    }

    function startMatch() {
        // Starting
        phase = 1;
        timeStart = new Date().getTime();
        editing = false;
        timer = setInterval(onClockUpdate, 50);
    }

    function onClockUpdate() {
        var clock = elByID("countdown");
        var lbl = elByID("countdown_label");
        var elapsed;

        if (phase < 0 || phase == 6) {
            // Paused
            elapsed = timeStart;
            if (clock.style.color == "black")
                clock.style.color = "white";
            else
                clock.style.color = "black";
        } else
            elapsed = new Date().getTime() - timeStart;

        var dur = 0;
        var bonus = 0;
        var label = "";
        if (Math.abs(phase) == 1) {
            // Prematch countdown
            dur = 4;
            clock.style.color = "blue";
            label = "ready...";
        } else if (Math.abs(phase) == 2) {
            // Autonomous
            dur = 30;
            clock.style.color = "blue";
            label = "autonomous";
        } else if (Math.abs(phase) == 3) {
            // Transition
            dur = 8;
            clock.style.color = "red";
            label = "ready..."
        } else if (Math.abs(phase) == 4) {
            // Teleop period
            dur = 90;
            bonus = 30; // Show the 30 seconds for Endgame as part of teleop  count
            clock.style.color = "blue";
            label = "teleop"
        } else if (Math.abs(phase) == 5) {
            // EndGame period
            dur = 30;
            clock.style.color = "orange";
            label = "endgame"
        } else if (Math.abs(phase) == 6) {
            // Game over!
            clock.style.display = "none";
            lbl.innerHTML = "&nbsp;";
            elByID("buttonPP").style.visibility = "hidden";
            elByID("auto").style.display = null;
            elByID("teleop").style.display = null;
            return;
        }
        var remaining = Math.round((dur + bonus) - elapsed / 1000);
        var minutes = Math.floor(remaining / 60);
        var secs = remaining % 60;
        if (secs < 10)
            secs = "0" + secs;
        clock.innerHTML = minutes + ":" + secs;
        lbl.innerHTML = label;

        if (remaining - bonus <= 0) {
            // Automatically move on to the next phase
            phase += 1;
            timeStart = new Date().getTime();

            if (phase == 3)
            {
                elByID("auto").style.backgroundColor = INACTIVE_COLOR;
                PlaySound("StartTeleop", startTeleop);

                // Stop timer, it will restart when the sound loads and begins
                // to play.  This ensures things are synched.
                clearInterval(timer);
            }
            else if (phase == 4)
                onTeleOp();
            else if (phase == 5)
            {
                PlaySound("StartEndgame");
                onEndGame();
            }
            else if (phase > 5)
            {
                PlaySound("EndOfMatch");
                editing = true;
            }
        }
    }

    function startTeleop() {
        timeStart = new Date().getTime();
        timer = setInterval(onClockUpdate, 50);
    }

    // HTML5 <audio> support
    // Example:  PlaySound("working");
    //      for  <audio id="working" src="snd/working.mp3"></audio>
    function PlaySound(audioID, onstart) {
        var sound = document.getElementById(audioID);
        var player = document.getElementById("AudioPlayer");

        // Using a single player allows us to later trigger a sound without
        // violating the iOS requirement that all sounds be initiated by a user
        // action. The first sound has to be triggered by a user action which
        // grants the player user-permission.  Subsequent (e.g. a timer
        // triggered) sounds inherit the permission granted the player element.
        player.loop = false;
        player.currentTime = 0;
        player.src = sound.src;
        player.onplay = onstart;
        player.play();
    }
    function StopSound(audioID) {
        var player = document.getElementById("AudioPlayer");
	    player.pause();
    }

</script>

<body onpageshow="init()">
    <table width="100%">
        <tr>
            <td colspan="4">
                <table width="100%">
                    <tr valign="top">
                            <td id="blue_score" style="width: 20vw;">0</td>
                            <td align="left">
                                <button id="buttonPP" onclick="onPlayPause()">
                                    <img id="iconPP" class="circleIcon" src="play_circle_outline.svg"></img>
                                </button>
                            </td>
                            <td colspan=2 align="center" style="position: relative">
                                <button id="auto" onclick="onAuto()">Auto</button>
                                <button id="teleop" onclick="onTeleOp()">TeleOp</button>
                                <span id="countdown"></span><span id="linebreaker"></span><span id="countdown_label">&nbsp;</span>
                            </td>
                            <td align="right">
                                <button id="buttonRefresh" onclick="location.reload()">
                                    <img id="iconRefresh" class="circleIcon" src="refresh.svg"></img>
                                </button>
                            </td>
                        </td>
                        <td id="red_score" align="right" style="width: 20vw;">0</td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr style="vertical-align:top">
            <td width="15vw" style="background-color:fff" rowspan="2">
                <table>
                    <tr>
                        <td><span style="position: relative;">
                                <img class="corner_img" src="Corner_blue.png" />

                                <div id="blue_platform_in" class="moveleft"
                                    style="position: absolute; top: -11vmax; left: 11.8vmax"></div>
                                <div id="blue_platform_out" class="moveright"
                                    style="position: absolute; top: -1vmax; left: 3vmax"></div>

                                <div id="blue_parking_end_1" class="parking"></div>
                                <div id="blue_parking_end_2" class="parking"></div>
                            </span>
                        </td>
                    </tr>

                </table>

                <table id="blue_skystone_count" class="stone_counters counter">
                    <tr>
                        <td><img width="100%" src="Skystone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">0</td>
                    </tr>
                </table>
                <table id="blue_stone_count" class="stone_counters counter">
                    <tr>
                        <td colspan="2"><img id="blue_stone" width="100%" src="Stone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">+0</td>
                        <td align="center">0</td>
                    </tr>
                </table>
            </td>
            <td width="60vw" colspan="2">
                <div class="foundation_container">
                    <table class="foundation blue counter" id="blue_foundation">
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                    </table>
                    <table class="foundation red counter" id="red_foundation">
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                        <tr><td/><td/></tr>
                    </table>
                </div>
            </td>
            <td width="15vw" style="background-color:fff" rowspan="2" align="right">
                <table>
                    <tr>
                        <td>
                            <span style="position: relative;">
                                <img class="corner_img" src="Corner_red.png" />&nbsp;

                                <div id="red_platform_out" class="moveleft"
                                    style="position: absolute; top: -1vmax; left: 7vmax"></div>
                                <div id="red_platform_in" class="moveright"
                                    style="position: absolute; top: -11vmax; left: -2vmax"></div>
                                <div id="red_parking_end_1" class="parking"></div>
                                <div id="red_parking_end_2" class="parking"></div>
                            </span>
                        </td>
                    </tr>
                </table>
                <table id="red_skystone_count" class="stone_counters counter">
                    <tr>
                        <td><img width="100%" src="Skystone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">0</td>
                    </tr>
                </table>

                <table id="red_stone_count" class="stone_counters counter">
                    <tr>
                        <td colspan="2"><img width="100%" src="Stone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">+0</td>
                        <td align="center">0</td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td colspan="2" valign="top" align="center" width="60vw">
                <span id="message">&nbsp;</span>
            </td>
        </tr>

        <tr>
            <td colspan="2" id="blue_skybridge" style="position: relative">
                <span class="skybridge blue_glow" style="left:1vw"></span>
                <div id="blue_parking_auto_1" class="parking"/>
                <div id="blue_parking_auto_2" class="parking"/>
            </td>

            <td colspan="2" id="red_skybridge" style="position: relative">
                <span class="skybridge red_glow" style="right:1vw"></span>
                <div id="red_parking_auto_1" class="parking" />
                <div id="red_parking_auto_2" class="parking" />
            </td>
            </td>
        </tr>
        <tr>
            <td>
                <table id="blue_return_count" class="stone_counters counter penalty">
                    <tr>
                        <td colspan="2"><img width="100%" src="Stone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">0</td>
                        <td align="center">0</td>
                    </tr>
                </table>
            </td>
            <td colspan="2">
                <table width="100%">
                    <tr>
                        <td align="right">
                            <div class="cap_holder">
                                <div id="blue_cap_1" class="cap blue"/>
                            </div>
                        </td>
                        <td width="1%">
                            <div class="cap_holder">
                                <div id="blue_cap_2" class="cap blue"/>
                            </div>
                        </td>

                        <td width="10%" align="center">
                            <img id="remove_btn" src="RemoveStone.png"/>
                        </td>

                        <td width="1%" align="right">
                            <div class="cap_holder">
                                <div id="red_cap_1" class="cap red"/>
                            </div>
                        </td>
                        <td>
                            <div class="cap_holder">
                                <div id="red_cap_2" class="cap red" />
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
            <td align="right">
                <table id="red_return_count" class="stone_counters counter penalty">
                    <tr>
                        <td colspan="2"><img width="100%" src="Stone.png" /></td>
                    </tr>
                    <tr>
                        <td align="center">0</td>
                        <td align="center">0</td>
                    </tr>
                </table>
            </td>

        </tr>

        <tr>
            <td colspan=4>
                <div id="credits" class="skystone_color_shadowed">brought to you by #3409 - the Astromechs and #5227 -
                    Galactech. Report bugs, suggestions and submit PRs on <a
                        href="https://github.com/KCAstromechs/Skystone_Scorer">Github</a>.</div>
            <td>
        </tr>
    </table>

    <img id="logo" class="logo_img" src="Logo.png" />

    <audio id="AudioPlayer" src=""></audio>
    <audio id="StartMatch" src="Autonomous.mp3" preload="auto"></audio>
    <audio id="StartTeleop" src="PickUpControllers.mp3" preload="auto"></audio>
    <audio id="StartEndgame" src="EndgameStart.mp3" preload="auto"></audio>
    <audio id="EndOfMatch" src="EndOfMatch.mp3" preload="auto"></audio>
</body>
</html>